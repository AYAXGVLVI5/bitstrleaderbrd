<!DOCTYPE HTML>
<html lang="en">
<head>
<meta name="viewport" content="width=device-width, 
    user-scalable=no, initial-scale=1, maximum-scale=1, user-scalable=0" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<style type="text/css">
body { margin: 0; padding: 0; background: #000;}
canvas { display: block; margin: 0 auto; background: #fff; }
</style>

</head>

<body>
<canvas></canvas>
<script>

// http://paulirish.com/2011/requestanimationframe-for-smart-animating
// shim layer with setTimeout fallback
window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame       || 
          window.webkitRequestAnimationFrame || 
          window.mozRequestAnimationFrame    || 
          window.oRequestAnimationFrame      || 
          window.msRequestAnimationFrame     || 
          function( callback ){
            window.setTimeout(callback, 1000 / 60);
          };
})();

// namespace our game
var POP = {

    // set up some inital values
    WIDTH: 320, 
    HEIGHT:  480, 
    scale:  1,
    // the position of the canvas
    // in relation to the screen
    offset: {top: 0, left: 0},
    // store all bubble, touches, particles etc
    entities: [],
    entitiesbackground :[],
    // the amount of game ticks until
    // we spawn a bubble
    nextBubble: 80,
    // for tracking player's progress
    nextSheep2 :1000,
    sundoesntexist : true,
    moondoesntexist : true,
    skydoesntexist : true,
    earthdoesntexist : true,
    playmode : false,
    menumode : true,
    tapsnosuccess: 5,
    lifes : 3,
    gameover : false,
    level :  1,

    score: {
        taps: -1,
        hit: 0,
        escaped: 0,
        accuracy: 0
    },
    // we'll set the rest of these
    // in the init function
    RATIO:  null,
    currentWidth:  null,
    currentHeight:  null,
    canvas: null,
    ctx:  null,
    ua:  null,
    android: null,
    ios:  null,

    init: function() {
   
        // the proportion of width to height
        POP.RATIO = POP.WIDTH / POP.HEIGHT;
        // these will change when the screen is resize
        POP.currentWidth = POP.WIDTH;
        POP.currentHeight = POP.HEIGHT;
        // this is our canvas element
        POP.canvas = document.getElementsByTagName('canvas')[0];
        // it's important to set this
        // otherwise the browser will
        // default to 320x200
        POP.canvas.width = POP.WIDTH;
        POP.canvas.height = POP.HEIGHT;
        // the canvas context allows us to 
        // interact with the canvas api
        POP.ctx = POP.canvas.getContext('2d');
        // we need to sniff out android & ios
        // so we can hide the address bar in
        // our resize function
        POP.ua = navigator.userAgent.toLowerCase();
        POP.android = POP.ua.indexOf('android') > -1 ? true : false;
        POP.ios = ( POP.ua.indexOf('iphone') > -1 || POP.ua.indexOf('ipad') > -1 || POP.ua.indexOf('ipod') > -1 ) ? true : false;

        // set up our wave effect
        // basically, a series of overlapping ovejas
        // across the top of screen
        POP.wave = {
            x: -25, // x coord of first oveja
            y: -40, // y coord of first oveja
            r: 50, // oveja radius
            time: 0, // we'll use this in calculating the sine wave
            offset: 0 // this will be the sine wave offset
        }; 
        // calculate how many ovejas we need to 
        // cover the screen width
        POP.wave.total = Math.ceil(POP.WIDTH / POP.wave.r) + 1;

        // listen for clicks
        window.addEventListener('click', function(e) {
            e.preventDefault();
            POP.Input.set(e);
        }, false);

        // listen for touches
        window.addEventListener('touchstart', function(e) {
            e.preventDefault();
            // the event object has an array
            // called touches, we just want
            // the first touch
            POP.Input.set(e.touches[0]);
        }, false);
        window.addEventListener('touchmove', function(e) {
            // we're not interested in this
            // but prevent default behaviour
            // so the screen doesn't scroll
            // or zoom
            e.preventDefault();
        }, false);
        window.addEventListener('touchend', function(e) {
            // as above
            e.preventDefault();
        }, false);

        // we're ready to resize
        POP.resize();
        POP.loopmenu();
    },


    resize: function() {
    
        POP.currentHeight = window.innerHeight;
        // resize the width in proportion
        // to the new height
        POP.currentWidth = POP.currentHeight * POP.RATIO;

        // this will create some extra space on the
        // page, allowing us to scroll pass
        // the address bar, and thus hide it.
        if (POP.android || POP.ios) {
            document.body.style.height = (window.innerHeight + 50) + 'px';
        }

        // set the new canvas style width & height
        // note: our canvas is still 320x480 but
        // we're essentially scaling it with CSS
        POP.canvas.style.width = POP.currentWidth + 'px';
        POP.canvas.style.height = POP.currentHeight + 'px';

        // the amount by which the css resized canvas
        // is different to the actual (480x320) size.
        POP.scale = POP.currentWidth / POP.WIDTH;
        // position of canvas in relation to
        // the screen
        POP.offset.top = POP.canvas.offsetTop;
        POP.offset.left = POP.canvas.offsetLeft;

        // we use a timeout here as some mobile
        // browsers won't scroll if there is not
        // a small delay
        window.setTimeout(function() {
                window.scrollTo(0,1);
        }, 1);
    },

    // this is where all entities will be moved
    // and checked for collisions etc

    update: function() {
        
        var i,
        checkCollision = false; 
        if(POP.lifes <=0){   
        
           POP.gameover = true;  
        
        }
        else if (POP.playmode){
        // decrease our nextBubble counter
        POP.nextBubble -= 1;
        POP.nextSheep2 -= 1;
        // if the counter is less than zero
        if (POP.nextBubble < 0) {
            // put a new instance of bubble into our entities array
            POP.entities.push(new POP.Bubble());
            // reset the counter with a random value
            POP.nextBubble = ( Math.random() * 80 ) + 50;
        }
        if (POP.nextSheep2 < 0){
           POP.entities.push(new POP.Sheep2());
           POP.nextSheep2 = (Math.random()*130) +940;     
        }
        if (POP.skydoesntexist){
           POP.entitiesbackground.push(new POP.Sky());
           POP.skydoesntexist = false;
        }
        if (POP.sundoesntexist){
           POP.entitiesbackground.push(new POP.Sun());
           POP.sundoesntexist = false;
        }
        if (POP.moondoesntexist){
           POP.entitiesbackground.push(new POP.Moon());
           POP.moondoesntexist = false;
        }
        if (POP.earthdoesntexist){
           POP.entitiesbackground.push(new POP.Earth());
           POP.earthdoesntexist = false;
        }
        // spawn a new instance of Touch
        // if the user has tapped the screen
        if (POP.Input.tapped) {
            
            POP.score.taps += 1;
            if (POP.score.taps > POP.tapsnosuccess){
                POP.score.taps =0;
                POP.lifes--;
            }
            
            // add a new touch
            POP.entities.push(new POP.Touch(POP.Input.x, POP.Input.y));
            // set tapped back to false
            // to avoid spawning a new touch
            // in the next cycle
            POP.Input.tapped = false;
            checkCollision = true;
        }
        for (i = 0; i < POP.entitiesbackground.length; i += 1) {
            POP.entitiesbackground[i].update();
        }

        // cycle through all entities and update as necessary
        for (i = 0; i < POP.entities.length; i += 1) {
            POP.entities[i].update();

            if ((POP.entities[i].type === 'bubble' || POP.entities[i].type === 'sheep2' )&& checkCollision) {
                hit = POP.collides(POP.entities[i], 
                                    {x: POP.Input.x, y: POP.Input.y, r: 7});
                if (hit && (POP.entities[i].type === 'bubble' )) {
                     
                    // reset tapping counter 
                    POP.score.taps =0; 
                    // spawn an exposion
                    for (var n = 0; n < 5; n +=1 ) {
                        POP.entities.push(new POP.Particle(
                            POP.entities[i].x, 
                            POP.entities[i].y, 
                            2, 
                            // random opacity to spice it up a bit
                            'rgba(255,255,255,'+Math.random()*1+')'
                        )); 
                    }
                    if (POP.entities[i].type === 'bubble' && POP.entities[i].speed >4 && POP.entities[i].r<14 ){
                       POP.score.hit += 30;
                       POP.score.taps =0;
                       POP.entities.push(new POP.Textextrapoints(                   POP.entities[i].x, 
                            POP.entities[i].y, 
                            30)); 
                    }
                    else{ 
                       POP.score.hit += 10;
                    }
                }
                if (hit && (POP.entities[i].type === 'sheep2' )) {
                    // spawn an exposion
                        POP.entities.push(new POP.Textextrapoints(                   POP.entities[i].x, 
                            POP.entities[i].y, 
                            50)); 
                    
                    POP.score.hit += 50;
                    POP.score.taps =0;
                }

                POP.entities[i].remove = hit;
            }
            
            


            // delete from array if remove property
            // flag is set to true
            if (POP.entities[i].remove) {
                POP.entities.splice(i, 1);
            }
        }

        // update wave offset
        // feel free to play with these values for
        // either slower or faster waves
        POP.wave.time = new Date().getTime() * 0.002;
        POP.wave.offset = Math.sin(POP.wave.time * 0.8) * 5;

        // calculate accuracy
        // POP.score.accuracy = (POP.score.hit / POP.score.taps) * 100;
        // POP.score.accuracy = isNaN(POP.score.accuracy) ?
        //    0 :
        //    ~~(POP.score.accuracy); // a handy way to round floats
    }
    },


    // this is where we draw all the entities
    render: function() {

        var i;

// Render Background
        
        for (i = 0; i < POP.entitiesbackground.length; i += 1) {
                POP.entitiesbackground[i].render();
        }

        // cycle through all entities and render to canvas
            for (i = 0; i < POP.entities.length; i += 1) {
                POP.entities[i].render();
            }
        
        

        // display scores
        POP.Draw.text('Hit: ' + POP.score.hit, 20, 30, 14, '#fff');
        POP.Draw.text('Escaped: ' + POP.score.escaped, 20, 50, 14, '#fff');
        POP.Draw.text('Taps without success: ' + POP.score.taps, 20, 70, 14, '#fff');
        POP.Draw.text('Lifes: ' + POP.lifes, 20, 90, 14, '#fff');
 

       // POP.Draw.text('Buy here sleep music at CDBaby.com', 20, POP.HEIGHT-15, 14, '#fff');
    },
    updatemenu: function() {
     if (POP.skydoesntexist){
           POP.entitiesbackground.push(new POP.Sky());
           POP.skydoesntexist = false;
        }
        if (POP.sundoesntexist){
           POP.entitiesbackground.push(new POP.Sun());
           POP.sundoesntexist = false;
        }
        if (POP.moondoesntexist){
           POP.entitiesbackground.push(new POP.Moon());
           POP.moondoesntexist = false;
        }
        if (POP.earthdoesntexist){
           POP.entitiesbackground.push(new POP.Earth());
           POP.earthdoesntexist = false;
        }
        if (POP.Input.tapped) {
          POP.playmode = true;
          POP.menumode = false;
          POP.gameover = false;
        }
        for (var i = 0; i < POP.entitiesbackground.length; i += 1) {
                POP.entitiesbackground[i].update();
        }
        for (var i = 0; i < POP.entities.length; i += 1) {
                POP.entities.splice(i, 1);
        }


    },
    rendermenu:function(){
    
        if (POP.menumode){ 
        for (var i = 0; i < POP.entitiesbackground.length; i += 1) {
                POP.entitiesbackground[i].render();
        }
        POP.Draw.text('Tap anywhere to begin',12,POP.HEIGHT-30, 14, '#000');
        }
    },
    updategameovermenu: function() {

        var i;
        if (POP.skydoesntexist){
           POP.entitiesbackground.push(new POP.Sky());
           POP.skydoesntexist = false;
        }
        if (POP.sundoesntexist){
           POP.entitiesbackground.push(new POP.Sun());
           POP.sundoesntexist = false;
        }
        if (POP.moondoesntexist){
           POP.entitiesbackground.push(new POP.Moon());
           POP.moondoesntexist = false;
        }
        if (POP.earthdoesntexist){
           POP.entitiesbackground.push(new POP.Earth());
           POP.earthdoesntexist = false;
        }
       
        for (i = 0; i < POP.entitiesbackground.length; i += 1) {
            POP.entitiesbackground[i].update();
        }
        for (i = 0; i < POP.entities.length; i += 1) {
            POP.entities[i].remove = true;
        }


        if (POP.Input.tapped) {
            //POP.init();
            POP.menumode = true;
            POP.gameover = false;
            POP.score.hit = 0;
            POP.score.escaped = 0;
            POP.lifes = 3;
            POP.score.taps = -1;
            POP.Input.tapped = false;
            
        }

    },
    rendergameovermenu:function(){
     
        var i;
        for (i=0; i < POP.entitiesbackground.length; i += 1) {
                POP.entitiesbackground[i].render();
           }
        POP.Draw.text('Game OVER',12,POP.HEIGHT/2, 30, '#000');
        POP.Draw.text('Your Score was: ' + POP.score.hit, 12, POP.HEIGHT/2+30, 14, '#fff');
        POP.Draw.text('Play again?', 12, POP.HEIGHT/2+50, 14, '#fff');


    },
    // the actual loop
    // requests animation frame
    // then proceeds to update
    // and render
    loop: function() {

       if (POP.gameover){
           POP.playmode = false;
           POP.loopgameover();
        }
        else if (POP.playmode){
           POP.update();
           POP.render();
        }
    },
    loopmenu: function(){
       requestAnimFrame( POP.loopmenu); 
       if (!POP.playmode && POP.menumode){         
         POP.updatemenu();
         POP.rendermenu();
        }
        else if(!POP.playmode && POP.gameover){
         POP.loopgameover();
        }
        else{
           POP.loop();
        }  
    },
    loopgameover: function(){
       if (POP.gameover ){         
         POP.updategameovermenu();
         POP.rendergameovermenu();
        }
    }

    

};

// checks if two entties are touching
POP.collides = function(a, b) {

        var distance_squared = ( ((a.x - b.x) * (a.x - b.x)) + 
                                ((a.y - b.y) * (a.y - b.y)));

        var radii_squared = (a.r + b.r) * (a.r + b.r);

        if (distance_squared < radii_squared) {
            return true;
        } else {
            return false;
        }
};


// abstracts various canvas operations into
// standalone functions
POP.Draw = {

    clear: function() {
        POP.ctx.clearRect(0, 0, POP.WIDTH, POP.HEIGHT);
    },


    rect: function(x, y, w, h, col) {
        POP.ctx.fillStyle = col;
        POP.ctx.fillRect(x, y, w, h);
    },

    oveja: function(x, y, r, col) {
        POP.ctx.fillStyle = col;
        POP.ctx.beginPath();
        for(var i=0;i<9;i++){
           POP.ctx.arc(x +(r*Math.sin(Math.PI*2*i/9)), y + (r/3*Math.cos(Math.PI*2*i/9)), r/2, 0,  Math.PI * 2, true);
        } 
        POP.ctx.closePath();
        POP.ctx.fill();
        POP.ctx.fillStyle = '#8f8f8f';
        POP.ctx.beginPath();
        POP.ctx.moveTo (x-r,y-r);
        POP.ctx.quadraticCurveTo(x-2*r, y-r ,x-2*r,y);
        POP.ctx.quadraticCurveTo(x-2*r, y+r/2 ,x-r,y);
        POP.ctx.quadraticCurveTo(x-0.5*r, y+0.5*r ,x-r,y-r);
        POP.ctx.closePath();
        POP.ctx.fill();
        POP.ctx.fillStyle = 'black';
        POP.ctx.beginPath();
        POP.ctx.arc(x-1.5*r, y - 0.5*r, r/8, 0,  Math.PI * 2, true);
        POP.ctx.closePath();
        POP.ctx.fill();
        POP.ctx.fillRect(x-0.5*r,y+0.6*r,r/8,r/2);
        POP.ctx.fillRect(x-0.75*r,y+0.6*r,r/8,r/2);
        POP.ctx.fillRect(x+0.75*r,y+0.6*r,r/8,r/2);
        POP.ctx.fillRect(x+0.5*r,y+0.6*r,r/8,r/2);
        POP.ctx.fillStyle = '#8f8f8f';
        POP.ctx.beginPath();
        POP.ctx.fillRect(x-0.5*r,y+1.1*r,r/8,0.1*r);
        POP.ctx.fillRect(x-0.75*r,y+1.1*r,r/8,0.1*r);
        POP.ctx.fillRect(x+0.75*r,y+1.1*r,r/8,0.1*r);
        POP.ctx.fillRect(x+0.5*r,y+1.1*r,r/8,0.1*r);
    },
    text: function(string, x, y, size, col) {
        POP.ctx.font = 'bold '+size+'px Monospace';
        POP.ctx.fillStyle = col;
        POP.ctx.fillText(string, x, y);
    },
    circle: function(x, y, r, col) {
        POP.ctx.fillStyle = col;
        POP.ctx.beginPath();
        POP.ctx.arc(x + 5, y + 5, r, 0,  Math.PI * 2, true);
        POP.ctx.closePath();
        POP.ctx.fill();
    },
    wolf: function(x, y, r, col, opacity) {
        r=r;
        //Teeth
        POP.ctx.fillStyle = 'rgba(255,255,255,'+opacity/2+')';
        POP.ctx.beginPath();
        for (var i=0;i<3;i++){      
           POP.ctx.moveTo(x-3*r+i*r,y+r/2+i*r/2);
           POP.ctx.quadraticCurveTo(x-2.5*r+i*r,y+2*r+i*r/2,x-2*r+i*r,y+r/2+i*r/2);
        }
        for (var i=0;i<3;i++){      
           POP.ctx.moveTo(x-3*r+i*r,y+3*r+i*r/3);
           POP.ctx.quadraticCurveTo(x-2.5*r+i*r,y+2*r+i*r/3,x-2*r+i*r,y+3*r+(i+1)*r/3);
        }

        POP.ctx.closePath();
        POP.ctx.fill();
        //mouth head up
        POP.ctx.fillStyle = col;
        POP.ctx.beginPath();      
        POP.ctx.moveTo(x-10,y);
        POP.ctx.quadraticCurveTo(x-4*r, y+r,x-5*r,y-0.5*r);
        POP.ctx.quadraticCurveTo(x+4, y+1.6*r,x+0.8*r,y+5*r);
        POP.ctx.arc(x + r, y + r, r/8, 0,  Math.PI * 2, true);
        //ear
        POP.ctx.moveTo(x+2*r,y-r);
        POP.ctx.quadraticCurveTo(x+r,y+2*r,x+r,y);
        POP.ctx.closePath();
        POP.ctx.fill();
        //mouth bottom
        POP.ctx.beginPath();      
        POP.ctx.moveTo(x-3*r,y+3*r);
        POP.ctx.quadraticCurveTo(x+1.5*r,y+5*r,x+0.5*r,y+4*r);
        POP.ctx.quadraticCurveTo(x-4*r,y+4*r,x-3*r,y+2.5*r);
        POP.ctx.closePath();
        POP.ctx.fill();
        //neck
        POP.ctx.beginPath();      
        POP.ctx.moveTo(x+r,y);
        POP.ctx.quadraticCurveTo(x+4*r,y+10*r,x+1.5*r,y+6*r);
        POP.ctx.closePath();
        POP.ctx.fill();
      //eye
        //POP.ctx.fillStyle = 'rgba(0,0,0,'+opacity+')';
        POP.ctx.beginPath();      
        POP.ctx.moveTo(x+r,y);
        POP.ctx.quadraticCurveTo(x+r,y+2*r,x-r,y+0.5*r);
        POP.ctx.closePath();
        POP.ctx.fill();
        var col2 = 'rgba(0,0,0,'+opacity+')';
        POP.Draw.circle(x-1.5*r,y-r/5,r/3,col2);   
    },

    sheephead: function(x, y, r, col) {
        var offsety = -r;
        var offsetx = r;  
        POP.ctx.fillStyle = col; 
        POP.ctx.beginPath();
        for(var i=0;i<9;i++){
           POP.ctx.arc(x +(r/3*Math.sin(Math.PI*2*i/9)), y + (r*Math.cos(Math.PI*2*i/9)), r/2, 0,  Math.PI * 2, true);
        } 
        POP.ctx.closePath();
        POP.ctx.fill();
        POP.ctx.fillStyle = '#8f8f8f';;
        POP.ctx.beginPath();
        POP.ctx.moveTo (x-r+offsetx,y-r+offsety);
        POP.ctx.quadraticCurveTo(x-2*r+offsetx, y-r+offsety ,x-2*r+offsetx,y+offsety);
        POP.ctx.quadraticCurveTo(x-2*r+offsetx, y+r/2+offsety ,x-r+offsetx,y+offsety);
        POP.ctx.quadraticCurveTo(x-0.5*r+offsetx, y+0.5*r+offsety ,x-r+offsetx,y-r+offsety);
        POP.ctx.closePath();
        POP.ctx.fill();POP.ctx.fillStyle = 'black';
        POP.ctx.beginPath();
        POP.ctx.arc(x-1.5*r+offsetx, y - 0.5*r+offsety, r/8, 0,  Math.PI * 2, true);
        POP.ctx.closePath();
        POP.ctx.fill();
        POP.ctx.fillRect(x-0.5*r,y+r,r/8,r/2);
        POP.ctx.fillRect(x-0.5*r,y-r/2,r/8,r/2);

        POP.ctx.fillStyle = '#ffb400';
        POP.Draw.jetpack(x,y,r,POP.ctx.fillStyle);

    },

    jetpack: function(x, y, r, col) {
        var offsety = -r;
        var offsetx = r;  
        POP.ctx.fillStyle = col; 
        POP.ctx.beginPath();
        for(var i=0;i<5;i++){
           POP.ctx.arc(x+r, y-r/2+r/3*i, r/3, 0,  Math.PI * 2, true);
        } 
        POP.ctx.closePath();
        POP.ctx.fill(); 
        POP.ctx.fillStyle = '#233567';
        POP.ctx.beginPath();
        POP.ctx.moveTo (x+r,y);
        POP.ctx.quadraticCurveTo(x+r, y-r/2,x-r*0.9,y-r/2);             
        POP.ctx.moveTo (x+r,y);
        POP.ctx.quadraticCurveTo(x+r, y-r/2,x-0.9*r,y+r/2);      
        POP.ctx.closePath();
        POP.ctx.fill(); 
        POP.ctx.fillStyle =  'rgba(183,37,37,'+Math.random()*0.7+')';
        POP.ctx.beginPath();
        POP.ctx.moveTo (x+r,y+r);
        POP.ctx.lineTo (x+1.5*r,y+2.3*r);
        POP.ctx.lineTo (x+0.8*r,y+2.3*r);
        POP.ctx.lineTo (x+0.85*r,y+1.5*r);
        POP.ctx.lineTo (x+0.9*r,y+r);
        POP.ctx.lineTo (x+r,y+r);
        POP.ctx.closePath();
        POP.ctx.fill();                     
    }



};



POP.Input = {

    x: 0,
    y: 0,
    tapped :false,

    set: function(data) {
        this.x = (data.pageX - POP.offset.left) / POP.scale;
        this.y = (data.pageY - POP.offset.top) / POP.scale;
        this.tapped = true;

    }

};

POP.Touch = function(x, y) {

    this.type = 'touch';    // we'll need this later
    this.x = x;             // the x coordinate
    this.y = y;             // the y coordinate
    this.r = 5;             // the radius
    this.opacity = 1;       // inital opacity. the dot will fade out
    this.fade = 0.05;       // amount by which to fade on each game tick
    // this.remove = false;    // flag for removing this entity. POP.update
                            // will take care of this

    this.update = function() {
        // reduct the opacity accordingly
        this.opacity -= this.fade; 
        // if opacity if 0 or less, flag for removal
        this.remove = (this.opacity < 0) ? true : false;
    };

    this.render = function() {
//        POP.Draw.wolf(this.x, this.y, this.r, 'rgba(85,85,85,'+this.opacity+')', this.opacity);
        POP.Draw.oveja(this.x, this.y, this.r, 'rgba(83,154,181,'+this.opacity+')', this.opacity);
    };

};

POP.Textextrapoints = function(x, y, points) {

    this.type = 'extrapoints';    // we'll need this later
    this.x = x;             // the x coordinate
    this.y = y;             // the y coordinate
    this.r = 25;             // the radius
    this.opacity = 1;       // inital opacity. the dot will fade out
    this.fade = 0.03;       // amount by which to fade on each game tick
    this.vy = -5;
    this.vx = 0.1;
    // this.remove = false;    // flag for removing this entity. POP.update
                            // will take care of this

    this.update = function() {
        // reduct the opacity accordingly
        this.opacity -= this.fade; 
        this.y += this.vy; 
        this.x += this.vx; 
        this.r += 2; 
        this.remove = (this.opacity < 0) ? true : false;
    };

    this.render = function() {
        POP.Draw.text('+ ' + points, this.x, this.y, this.r, 'rgba(180,95,145,'+this.opacity+')');

    };

};


POP.Bubble = function() {

    this.type = 'bubble';
    this.r = (Math.random() * 20) + 10;
    this.speed = (Math.random() * 4) + 2;
 
    this.y = (Math.random() * (POP.HEIGHT))- 100 - this.r-200;
    this.x = POP.WIDTH - (Math.random() * 100) + 100;

    // the amount by which the bubble
    // will move from side to side
    this.waveSize = 50 + (Math.random()*20);
    // we need to remember the original
    // x position for our sine wave calculation
    this.xConstant = this.x;

    this.remove = false;


    this.update = function() {

        // a sine wave is commonly a function of time
        var time = new Date().getTime()/POP.WIDTH;

        this.x -= this.speed;
        // the y coord to follow a sine wave
        this.y = this.waveSize * Math.sin(time)+3*POP.HEIGHT/4 ;

        // if offscreen flag for removal
        if (this.x < -10) {
            POP.score.escaped += 1; // update score
            this.remove = true;
        }

    };

    this.render = function() {
        var col = 'rgba(255,255,255,1)';
        if (this.speed >4 && this.r<14){
          col = 'rgba(50,50,50,1)';
        }
        POP.Draw.oveja(this.x, this.y, this.r, col );
    };

};

POP.Sheep2 = function() {

    this.type = 'sheep2';
    this.r = (Math.random()*10)+10; 
    this.speed = (Math.random()*3)+4;           
    this.x = ((POP.WIDTH)/2)+(Math.random() *(POP.WIDTH)/4 - this.r);
    this.y = POP.HEIGHT + (Math.random()*100)+ 100; // make sure it starts off screen
    this.remove = false;
    this.waveSize = Math.random()*POP.WIDTH/2 - this.r;
    this.xConstant = this.x;

    this.update = function() {
        
        var time = new Date().getTime()*0.002;

        // move up the screen by 1 pixel
        this.y -= this.speed;
        this.x = this.waveSize * Math.sin(time)+this.xConstant;

        // if off screen, flag for removal
        if (this.y < -10) {
            this.remove = true;
            POP.score.escaped +=1;
        }

    };
    this.render = function() {

        POP.Draw.sheephead(this.x, this.y, this.r, 'rgba(255,255,255,1)');
    };

};

POP.Sun = function() {

    this.type = 'sun';
    this.r = POP.currentWidth / 12; 
    this.speed = 1;           
    this.x = ((POP.currentWidth )/6);
    this.y = POP.currentHeight *0.7; 
    this.remove = false;
    this.sunradx = POP.currentWidth /2 - this.r;
    this.sunrady = POP.currentHeight /2 - this.r;
    this.xConstant = POP.currentWidth/2 ;
    this.yConstant = POP.currentHeight/2 ;

    this.update = function() {
        
        var time = new Date().getTime()*0.0002;

        // move up the screen by 1 pixel
       
        this.x = this.sunradx * Math.sin(time)+this.xConstant;
        this.y = -this.sunrady * Math.cos(time)+this.yConstant;

        // if off screen, flag for removal
        if (this.y < -10) {
            this.remove = true;
        }

    };
    this.render = function() {

        POP.Draw.circle(this.x, this.y, this.r, '#e8e540');
    };

};
POP.Moon = function() {

    this.type = 'sun';
    this.r = POP.currentWidth / 24; 
    this.speed = 1;           
    this.x = ((POP.currentWidth )/6);
    this.y = POP.currentHeight *0.7; 
    this.remove = false;
    this.sunradx = POP.currentWidth /2 - this.r;
    this.sunrady = POP.currentHeight /2 - this.r;
    this.xConstant = POP.currentWidth/2 ;
    this.yConstant = POP.currentHeight/2 ;

    this.update = function() {
        
        var time = new Date().getTime()*0.0002;
        this.x = this.sunradx * Math.sin(time+Math.PI)+this.xConstant;
        this.y = -this.sunrady * Math.cos(time+Math.PI)+this.yConstant;

        // if off screen, flag for removal
        if (this.y < -10) {
            this.remove = true;
        }

    };
    this.render = function() {

        POP.Draw.circle(this.x, this.y, this.r, '#ffffff');
    };

};
POP.Sky = function() {
    this.type = 'sky'; 
    var R=10;
    var G=23;
    var B=51;
    this.col= null;
    uplight=true;
    
    this.update = function() {   
        var time = new Date().getTime()*0.0002;  
        R = ~~(100+60*Math.sin(time+Math.PI/4));
        G = ~~(110+70*Math.sin(time+Math.PI/4));
        B = ~~(140+100*Math.sin(time+Math.PI/4));        
        POP.Sky.col='rgba('+R+','+G+','+B+',1)';    
    };
    this.render = function() {
        POP.Draw.rect(0, 0, POP.WIDTH, POP.HEIGHT,POP.Sky.col);
    };

};
POP.Earth = function() {
    this.col= null;
    var R=10;
    var G=57;
    var B=10;

    this.type = 'sky';    
    this.update = function() {        
        var time = new Date().getTime()*0.0002;
        R = ~~(45+35*Math.sin(time+Math.PI/4));
        G = ~~(115+55*Math.sin(time+Math.PI/4));
        B = ~~(45+35*Math.sin(time+Math.PI/4));        
        POP.Earth.col='rgba('+R+','+G+','+B+',1)';    
      
    };
    this.render = function() {
       POP.Draw.circle(POP.WIDTH/2, 1.5*POP.HEIGHT,1.5*POP.WIDTH, POP.Earth.col);
    };

};



POP.Particle = function(x, y,r, col) {

    this.x = x;
    this.y = y;
    this.r = r;
    this.col = col;

    // determines whether particle will
    // travel to the right of left
    // 50% chance of either happening
    this.dir = (Math.random() * 2 > 1) ? 1 : -1;

    // random values so particles do no
    // travel at the same speeds
    this.vx = ~~(Math.random() * 4) * this.dir;
    this.vy = ~~(Math.random() * 7);

    //this.remove = false;

    this.update = function() {

        // update coordinates
        this.x += this.vx;
        this.y += this.vy;

        // increase velocity so particle
        // accelerates off screen
        this.vx *= 0.99;
        this.vy *= 0.99;

        // adding this negative amount to the
        // y velocity exerts an upward pull on
        // the particle, as if drawn to the
        // surface
        this.vy += 0.25;

        // offscreen
        if (this.y > POP.HEIGHT  ) {
            this.remove = true;
        }

    };


    this.render = function() {
        POP.Draw.oveja(this.x, this.y, this.r, this.col);
    };

};

window.addEventListener('load', POP.init, false);
window.addEventListener('resize', POP.resize, false);

</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-42972905-2', 'glacial-falls-8555.herokuapp.com');
  ga('send', 'pageview');

</script>


</body>
</html>

